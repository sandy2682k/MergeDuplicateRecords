***************Apex class 1(ContactController.cls)**********

public with sharing class ContactController {
  @AuraEnabled(cacheable=true)
  public static List<Contact> findDuplicateContacts(String name, String email) {
      if (name == null || email == null) {
          throw new IllegalArgumentException('Name and email must not be null');
      }
      List<Contact> duplicates = new List<Contact>();
      try {
          duplicates = [SELECT Id, Name, Email FROM Contact WHERE Name = :name AND Email = :email];
      } catch (Exception e) {
          System.debug('An error occurred while finding duplicate contacts: ' + e.getMessage());
      }
      return duplicates;
  }
  @AuraEnabled(cacheable=true)
  public static List<Lead> findDuplicateLeads(String name, String email) {
      if (name == null || email == null) {
          throw new IllegalArgumentException('Name and email must not be null');
      }
      List<Lead> duplicates = new List<Lead>();
      try {
          duplicates = [SELECT Id, Name, Email FROM Lead WHERE Name = :name AND Email = :email];
      } catch (Exception e) {
          System.debug('An error occurred while finding duplicate leads: ' + e.getMessage());
      }
      return duplicates;
  }
}

***************Apex class 2(MergeDuplicateContacts.cls)**********

public class MergeDuplicateContacts {
  @AuraEnabled
  public static void mergeContacts(List<Id> recordIds) {
      if (recordIds == null || recordIds.isEmpty()) {
          System.debug('No records to merge');
          return; // No records to merge
      }

      System.debug('Fetching contacts to merge');
      List<Contact> contactsToMerge = [SELECT Id, Email, FirstName, LastName FROM Contact WHERE Id IN :recordIds];

      Map<String, List<Contact>> contactsByEmail = new Map<String, List<Contact>>();
      for (Contact c : contactsToMerge) {
          if (c.Email != null) {
              System.debug('Processing contact with email: ' + c.Email);
              if (!contactsByEmail.containsKey(c.Email)) {
                  contactsByEmail.put(c.Email, new List<Contact>());
              }
              contactsByEmail.get(c.Email).add(c);
          }
      }

      for (String email : contactsByEmail.keySet()) {
          List<Contact> dupes = contactsByEmail.get(email);
          if (dupes.size() > 1) {
              System.debug('Merging contacts with email: ' + email);
              Contact master = dupes[0];
              dupes.remove(0);
              try {
                  mergeContacts(master, dupes);
              } catch (DmlException e) {
                  System.debug('An error occurred while merging contacts: ' + e.getMessage());
              }
          }
      }
  }

  private static void mergeContacts(Contact master, List<Contact> duplicates) {
      System.debug('Merging master contact: ' + master.Id);
      // Assign fields from duplicates to master
      for (Contact dupe : duplicates) {
          if (dupe.FirstName != null) {
              master.FirstName = dupe.FirstName;
          }
          if (dupe.LastName != null) {
              master.LastName = dupe.LastName;
          }
          // You can include more field assignments here based on your requirements

          // Update related records, if needed
          updateRelatedRecords(master.Id, dupe.Id);
      }

      // Update the master contact
      update master;

      // Delete the duplicate contacts
      delete duplicates;
  }

  private static void updateRelatedRecords(Id masterId, Id duplicateId) {
      System.debug('Updating related records for master contact: ' + masterId);
      // Implement your logic to update related records here
  }
}

*************duplicateContactFinder.html*******
<template>
  <lightning-card title="Duplicate Records Finder">
      <div class="slds-m-around_medium">
          <lightning-input label="Name" value={nameValue} onchange={handleNameChange}></lightning-input>
          <lightning-input label="Email" value={emailValue} onchange={handleEmailChange}></lightning-input>
          <div class="slds-grid slds-grid_vertical-align-center slds-m-top_medium">
              <div class="slds-col">
                  <lightning-button variant="brand" label="Check Duplicate Contacts" onclick={checkDuplicates}></lightning-button>
              </div>
              <div class="slds-col_bump-right">
                  <lightning-button variant="brand" label="Check Duplicate Leads" onclick={checkDuplicateLeads}></lightning-button>
              </div>
          </div>
      </div>
      
      <template if:true={duplicateContacts}>
          <div class="slds-m-around_medium">
              <lightning-datatable
                  key-field="Id"
                  data={duplicateContacts}
                  columns={columns}
                  onrowselection={handleRowSelection}
                  >
              </lightning-datatable>
              <div class="slds-m-top_medium">
                  <lightning-button variant="brand" label="Merge Selected" onclick={mergeRecords}></lightning-button>
              </div>
          </div>
      </template>
  </lightning-card>
</template>

********* duplicateContactFinder.js ***********

import { LightningElement, track } from 'lwc';
import findDuplicateContacts from '@salesforce/apex/ContactController.findDuplicateContacts';
import findDuplicateLeads from '@salesforce/apex/ContactController.findDuplicateLeads';
import mergeContacts from '@salesforce/apex/MergeDuplicateContacts.mergeContacts';

const columns = [
  { label: 'Name', fieldName: 'Name' },
  { label: 'Email', fieldName: 'Email' }
];

export default class DuplicateContactFinder extends LightningElement {
  @track nameValue = '';
  @track emailValue = '';
  @track duplicateContacts = [];
  @track selectedIds = [];
  columns = columns;

  handleNameChange(event) {
      this.nameValue = event.target.value;
      console.log('handle event 1'+ this.nameValue);
  }

  handleEmailChange(event) {
      this.emailValue = event.target.value;
      console.log('handle event 2/n'+ this.emailValue);
  }

  checkDuplicates() {
      findDuplicateContacts({ name: this.nameValue, email: this.emailValue })
          .then(result => {
              this.duplicateContacts = result;
          })
          .catch(error => {
              console.error('Error fetching duplicate contacts:', error);
          });
  }

  checkDuplicateLeads() {
      findDuplicateLeads({ name: this.nameValue, email: this.emailValue })
          .then(result => {
              this.duplicateContacts = result;
          })
          .catch(error => {
              console.error('Error fetching duplicate leads:', error);
          });
  }

  handleRowSelection(event) {
      this.selectedIds = event.detail.selectedRows.map(row => row.Id);
      console.log('SelectedIds:' , this.selectedIds);

  }

  mergeRecords() {
      console.log('Merge records function called.');
      console.log('SelectedIds:' , this.selectedIds);

      if (this.selectedIds.length > 1) {
          console.log('Selected IDs:', this.selectedIds);

          try {
               mergeContacts({ recordIds: this.selectedIds });
              console.log('Merge successful');
              // Perform any necessary updates or actions after merging
          } catch (error) {
              console.error('Error merging records:', error);
          }
      }
  }  
}


